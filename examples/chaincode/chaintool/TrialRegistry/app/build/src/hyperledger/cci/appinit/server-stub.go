/* Generated by chaintool.  DO NOT EDIT */

package appinit

import (
	"encoding/base64"
	"errors"
	"github.com/golang/protobuf/proto"
	"github.com/hyperledger/fabric/core/chaincode/shim"
	"hyperledger/ccs/api"
)

type CCInterface interface {
	Init(*shim.ChaincodeStub, *Init) error
}

type stubImpl struct {
	intf CCInterface
}

// Factory mechanics
type factoryImpl struct {
}

func init() {
	self := &factoryImpl{}
	api.Register("appinit", self)
}

func (self *factoryImpl) Create(intf interface{}) (api.Dispatcher, error) {
	return &stubImpl{intf: intf.(CCInterface)}, nil
}

func (self *stubImpl) DispatchTxn(stub *shim.ChaincodeStub, function int, params string) ([]byte, error) {
	// Handle different functions
	switch {
	case function == 1:
		return self.proxyInit(stub, params)
	default:
		return nil, errors.New("Received unknown function invocation")
	}
}

func (self *stubImpl) DispatchQuery(stub *shim.ChaincodeStub, function int, params string) ([]byte, error) {
	// Handle different functions
	switch {
	default:
		return nil, errors.New("Received unknown function invocation")
	}
}

/* Server stubs */
func (self *stubImpl) proxyInit(stub *shim.ChaincodeStub, _params string) ([]byte, error) {

	params := &Init{}
	_pbinput, err := base64.StdEncoding.DecodeString(_params)
	if err != nil {
		return nil, err
	}
	err = proto.Unmarshal(_pbinput, params)
	if err != nil {
		return nil, err
	}

	err = self.intf.Init(stub, params)
	if err != nil {
		return nil, err
	}

	return nil, nil
}
